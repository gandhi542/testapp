#Start minikube
minikube start --memory 6g --cpus 4

#Install knative serving crds and serving core
kubectl apply     --filename https://github.com/knative/serving/releases/download/v0.24.0/serving-crds.yaml
kubectl apply     --filename https://github.com/knative/serving/releases/download/v0.24.0/serving-core.yaml

#Watch the pods coming up in knative-serving namespace
kubectl --namespace knative-serving     get pods

#Installing Istio service mesh using Istioctl (set it in the path)
source ~/.bashrc
istioctl install

#Enable Istio injection for knative-serving namespace
kubectl label namespace knative-serving     istio-injection=enabled
kubectl get ns --show-labels

#Enable peer auth for Istio
cat peer-auth.yaml 
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: knative-serving
spec:
  mtls:
    mode: PERMISSIVE

kubectl apply -f peer-auth.yaml 


kubectl get pods -n istio-system

#Install net-istio service for knative-serving namespace
kubectl apply     --filename https://github.com/knative/net-istio/releases/download/v0.24.0/release.yaml

kubectl --namespace knative-serving     get pods


#Setting up env variables for accessing through ingress host
export INGRESS_IP=$(minikube ip)
export INGRESS_PORT=$(kubectl \
    --namespace istio-system \
    get service istio-ingressgateway \
    --output jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export INGRESS_HOST=$INGRESS_IP:$INGRESS_PORT
echo $INGRESS_HOST

kubectl --namespace knative-serving     get pods

#Configure git parameters
git config user.name
git config user.email
git config user.pass

#Create namespace and enable istio injection
kubectl create namespace myns
kubectl label namespace myns istio-injection=enabled

#Setup docker registry config and create secret for myns namespace
export REGISTRY_SERVER=https://index.docker.io/v1/
export REGISTRY_USER=<dockerhub-username>
export REGISTRY_PASS=<dockerhub-password>
kubectl delete secret regcred -n myns
kubectl -n myns create secret docker-registry regcred --docker-server=$REGISTRY_SERVER --docker-username=$REGISTRY_USER --docker-password=$REGISTRY_PASS

#Install tekton pipeline, triggers & tekton dashboard on tekton-pipelines namespace
kubectl apply     --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
kubectl apply     --filename https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
kubectl apply     --filename https://storage.googleapis.com/tekton-releases/dashboard/latest/tekton-dashboard-release.yaml

#Applying (creating) tekton pipeline 
kubectl apply -f myapp-cd.yaml 

#Create and run pipelinerun
kubectl create -f myapp-cd-run.yaml 

#Listing the pipelineruns
tkn -n myns pipelinerun list

#Following the output of pipelinerun on the terminal
tkn -n myns pipelinerun logs --last --follow


#Accessing the deployed application
curl -H "Host: myapp-kn-service.myns.example.com" http://$INGRESS_HOST
